[debug] [2025-02-18T00:08:42.287Z] ----------------------------------------------------------------------
[debug] [2025-02-18T00:08:42.291Z] Command:       /usr/local/bin/node /Users/sam/.npm-global/bin/firebase deploy --only functions
[debug] [2025-02-18T00:08:42.292Z] CLI Version:   13.29.3
[debug] [2025-02-18T00:08:42.292Z] Platform:      darwin
[debug] [2025-02-18T00:08:42.292Z] Node Version:  v20.15.0
[debug] [2025-02-18T00:08:42.292Z] Time:          Mon Feb 17 2025 19:08:42 GMT-0500 (Eastern Standard Time)
[debug] [2025-02-18T00:08:42.292Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-02-18T00:08:42.293Z] >>> [apiv2][query] GET https://firebase-public.firebaseio.com/cli.json [none]
[debug] [2025-02-18T00:08:42.408Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-02-18T00:08:42.408Z] > authorizing via signed-in user (1sammpjp@gmail.com)
[debug] [2025-02-18T00:08:42.409Z] [iam] checking project insilico-surveys for permissions ["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","firebase.projects.get"]
[debug] [2025-02-18T00:08:42.409Z] Checked if tokens are valid: false, expires at: 1738704870336
[debug] [2025-02-18T00:08:42.409Z] Checked if tokens are valid: false, expires at: 1738704870336
[debug] [2025-02-18T00:08:42.409Z] > refreshing access token with scopes: []
[debug] [2025-02-18T00:08:42.409Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2025-02-18T00:08:42.410Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-02-18T00:08:42.526Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2025-02-18T00:08:42.526Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-02-18T00:08:42.548Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions [none]
[debug] [2025-02-18T00:08:42.548Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:42.548Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","firebase.projects.get"]}
[debug] [2025-02-18T00:08:42.549Z] <<< [apiv2][status] GET https://firebase-public.firebaseio.com/cli.json 200
[debug] [2025-02-18T00:08:42.549Z] <<< [apiv2][body] GET https://firebase-public.firebaseio.com/cli.json {"cloudBuildErrorAfter":1594252800000,"cloudBuildWarnAfter":1590019200000,"defaultNode10After":1594252800000,"minVersion":"3.0.5","node8DeploysDisabledAfter":1613390400000,"node8RuntimeDisabledAfter":1615809600000,"node8WarnAfter":1600128000000}
[debug] [2025-02-18T00:08:42.756Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions 200
[debug] [2025-02-18T00:08:42.757Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","firebase.projects.get"]}
[debug] [2025-02-18T00:08:42.757Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:42.757Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:42.757Z] >>> [apiv2][query] POST https://iam.googleapis.com/v1/projects/insilico-surveys/serviceAccounts/insilico-surveys@appspot.gserviceaccount.com:testIamPermissions [none]
[debug] [2025-02-18T00:08:42.757Z] >>> [apiv2][body] POST https://iam.googleapis.com/v1/projects/insilico-surveys/serviceAccounts/insilico-surveys@appspot.gserviceaccount.com:testIamPermissions {"permissions":["iam.serviceAccounts.actAs"]}
[debug] [2025-02-18T00:08:42.943Z] <<< [apiv2][status] POST https://iam.googleapis.com/v1/projects/insilico-surveys/serviceAccounts/insilico-surveys@appspot.gserviceaccount.com:testIamPermissions 404
[debug] [2025-02-18T00:08:42.943Z] <<< [apiv2][body] POST https://iam.googleapis.com/v1/projects/insilico-surveys/serviceAccounts/insilico-surveys@appspot.gserviceaccount.com:testIamPermissions {"error":{"code":404,"message":"Unknown service account","status":"NOT_FOUND"}}
[debug] [2025-02-18T00:08:42.943Z] [functions] service account IAM check errored, deploy may fail: Request to https://iam.googleapis.com/v1/projects/insilico-surveys/serviceAccounts/insilico-surveys@appspot.gserviceaccount.com:testIamPermissions had HTTP Error: 404, Unknown service account {"name":"FirebaseError","children":[],"context":{"body":{"error":{"code":404,"message":"Unknown service account","status":"NOT_FOUND"}},"response":{"statusCode":404}},"exit":1,"message":"Request to https://iam.googleapis.com/v1/projects/insilico-surveys/serviceAccounts/insilico-surveys@appspot.gserviceaccount.com:testIamPermissions had HTTP Error: 404, Unknown service account","status":404}
[info] 
[info] === Deploying to 'insilico-surveys'...
[info] 
[info] i  deploying functions 
[debug] [2025-02-18T00:08:42.946Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:42.946Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:42.946Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys [none]
[debug] [2025-02-18T00:08:43.046Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys 200
[debug] [2025-02-18T00:08:43.046Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys {"projectNumber":"205912587561","projectId":"insilico-surveys","lifecycleState":"ACTIVE","name":"insilico-surveys","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2025-02-03T03:06:41.965268Z"}
[info] i  functions: preparing codebase default for deployment 
[info] i  functions: ensuring required API cloudfunctions.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:43.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[info] i  functions: ensuring required API cloudbuild.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:43.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.047Z] Checked if tokens are valid: true, expires at: 1739840921526
[info] i  artifactregistry: ensuring required API artifactregistry.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:43.047Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.047Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.047Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudfunctions.googleapis.com [none]
[debug] [2025-02-18T00:08:43.047Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudfunctions.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:43.047Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/runtimeconfig.googleapis.com [none]
[debug] [2025-02-18T00:08:43.047Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/runtimeconfig.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:43.048Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudbuild.googleapis.com [none]
[debug] [2025-02-18T00:08:43.048Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudbuild.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:43.048Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/artifactregistry.googleapis.com [none]
[debug] [2025-02-18T00:08:43.048Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/artifactregistry.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:43.424Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/runtimeconfig.googleapis.com 200
[debug] [2025-02-18T00:08:43.424Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/runtimeconfig.googleapis.com [omitted]
[debug] [2025-02-18T00:08:43.429Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudfunctions.googleapis.com 200
[debug] [2025-02-18T00:08:43.429Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudfunctions.googleapis.com [omitted]
[info] âœ”  functions: required API cloudfunctions.googleapis.com is enabled 
[debug] [2025-02-18T00:08:43.431Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/artifactregistry.googleapis.com 200
[debug] [2025-02-18T00:08:43.431Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/artifactregistry.googleapis.com [omitted]
[info] âœ”  artifactregistry: required API artifactregistry.googleapis.com is enabled 
[debug] [2025-02-18T00:08:43.450Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudbuild.googleapis.com 200
[debug] [2025-02-18T00:08:43.450Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/cloudbuild.googleapis.com [omitted]
[info] âœ”  functions: required API cloudbuild.googleapis.com is enabled 
[debug] [2025-02-18T00:08:43.451Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.451Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.451Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/insilico-surveys/adminSdkConfig [none]
[debug] [2025-02-18T00:08:43.743Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/insilico-surveys/adminSdkConfig 200
[debug] [2025-02-18T00:08:43.743Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/insilico-surveys/adminSdkConfig {"projectId":"insilico-surveys","storageBucket":"insilico-surveys.firebasestorage.app"}
[debug] [2025-02-18T00:08:43.744Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.744Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.744Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs [none]
[debug] [2025-02-18T00:08:43.916Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs 200
[debug] [2025-02-18T00:08:43.916Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs {"configs":[{"name":"projects/insilico-surveys/configs/stripe"}]}
[debug] [2025-02-18T00:08:43.917Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.917Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:43.917Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables [none]
[debug] [2025-02-18T00:08:44.050Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables 200
[debug] [2025-02-18T00:08:44.050Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables {"variables":[{"name":"projects/insilico-surveys/configs/stripe/variables/secret","updateTime":"2025-02-04T20:43:13.944319845Z"},{"name":"projects/insilico-surveys/configs/stripe/variables/secret_key","updateTime":"2025-02-04T20:34:57.463915897Z"},{"name":"projects/insilico-surveys/configs/stripe/variables/webhook","updateTime":"2025-02-04T20:43:15.868294480Z"}]}
[debug] [2025-02-18T00:08:44.050Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:44.051Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:44.051Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:44.051Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:44.051Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:44.051Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:44.051Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/secret [none]
[debug] [2025-02-18T00:08:44.053Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/secret_key [none]
[debug] [2025-02-18T00:08:44.056Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/webhook [none]
[debug] [2025-02-18T00:08:44.155Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/secret 200
[debug] [2025-02-18T00:08:44.155Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/secret {"name":"projects/insilico-surveys/configs/stripe/variables/secret","updateTime":"2025-02-04T20:43:13.944319845Z","text":"sk_test_51MKsf9DT4vO9oNMHxNBXZYgcrEDlb0BNnNdS0L5bjTHD7gIM2vnXohrEP9DMD2GU9IYCDzhQt5amEanG7NwW7jGG00wJveSBEx"}
[debug] [2025-02-18T00:08:44.182Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/webhook 200
[debug] [2025-02-18T00:08:44.182Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/webhook {"name":"projects/insilico-surveys/configs/stripe/variables/webhook","updateTime":"2025-02-04T20:43:15.868294480Z","text":"whsec_dGUK3dcTqhqet7Fm4TtMcAXfuAS6100j"}
[debug] [2025-02-18T00:08:44.201Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/secret_key 200
[debug] [2025-02-18T00:08:44.201Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/insilico-surveys/configs/stripe/variables/secret_key {"name":"projects/insilico-surveys/configs/stripe/variables/secret_key","updateTime":"2025-02-04T20:34:57.463915897Z","text":"sk_test_51MKsf9DT4vO9oNMHxNBXZYgcrEDlb0BNnNdS0L5bjTHD7gIM2vnXohrEP9DMD2GU9IYCDzhQt5amEanG7NwW7jGG00wJveSBEx"}
[debug] [2025-02-18T00:08:44.204Z] Validating nodejs source
[warn] âš   functions: package.json indicates an outdated version of firebase-functions. Please upgrade using npm install --save firebase-functions@latest in your functions directory. 
[debug] [2025-02-18T00:08:44.660Z] > [functions] package.json contents: {
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "20"
  },
  "main": "index.js",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "stripe": "^13.0.0",
    "firebase-admin": "^11.10.1",
    "firebase-functions": "^4.5.0"
  },
  "devDependencies": {
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}
[debug] [2025-02-18T00:08:44.660Z] Building nodejs source
[info] i  functions: Loading and analyzing source code for codebase default to determine what to deploy 
[debug] [2025-02-18T00:08:44.660Z] Could not find functions.yaml. Must use http discovery
[debug] [2025-02-18T00:08:44.664Z] Found firebase-functions binary at '/Users/sam/insilico-surveys-1/functions/node_modules/.bin/firebase-functions'
[info] Serving at port 8841

[debug] [2025-02-18T00:08:45.027Z] Got response from /__/functions.yaml {"endpoints":{"api":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"httpsTrigger":{},"entryPoint":"api"}},"specVersion":"v1alpha1","requiredAPIs":[],"extensions":{}}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:50.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:50.046Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:50.046Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/firebaseextensions.googleapis.com [none]
[debug] [2025-02-18T00:08:50.046Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:50.550Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/firebaseextensions.googleapis.com 200
[debug] [2025-02-18T00:08:50.550Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/firebaseextensions.googleapis.com [omitted]
[info] âœ”  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2025-02-18T00:08:50.550Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-02-18T00:08:50.550Z] > authorizing via signed-in user (1sammpjp@gmail.com)
[debug] [2025-02-18T00:08:50.550Z] [iam] checking project insilico-surveys for permissions ["firebase.projects.get","firebaseextensions.instances.list"]
[debug] [2025-02-18T00:08:50.550Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:50.550Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:50.550Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions [none]
[debug] [2025-02-18T00:08:50.550Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:50.550Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2025-02-18T00:08:50.728Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions 200
[debug] [2025-02-18T00:08:50.728Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2025-02-18T00:08:50.728Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:50.728Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:50.730Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/insilico-surveys/instances pageSize=100&pageToken=
[debug] [2025-02-18T00:08:51.124Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/insilico-surveys/instances 200
[debug] [2025-02-18T00:08:51.126Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/insilico-surveys/instances {"instances":[{"name":"projects/insilico-surveys/instances/firestore-stripe-payments","createTime":"2025-02-03T18:14:45.665034Z","updateTime":"2025-02-03T18:18:54.220822Z","state":"ERRORED","config":{"name":"projects/insilico-surveys/instances/firestore-stripe-payments/configurations/1b401242-c141-42d3-b8dc-373f27ff2673","createTime":"2025-02-03T18:14:45.665034Z","source":{"name":"projects/stripe-subs-ext/sources/d7ed1c3e-f4b1-4dee-93b3-abb19e46f1a4","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/stripe-firestore-stripe-payments-0.3.4-66d49480-dd6e-4447-a5a2-c23af8373a2b.zip","hash":"d8ab13445f1cf92b77a4067820bf0fd9b57bc1d1eaa30fa1eb080add3680c5b6","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.4","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhookâ€™s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customerâ€™s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Stripe configuration collection: What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.\n\n* Minimum instances for createCheckoutSession function: Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically chargedâ€”where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}]},"fetchTime":"2023-08-14T09:58:54.399327Z","lastOperationName":"projects/stripe-subs-ext/operations/51f60f2d-dd10-44ae-9ddd-edad57635e2a","state":"ACTIVE"},"params":{"STRIPE_WEBHOOK_SECRET":"projects/205912587561/secrets/firestore-stripe-payments-STRIPE_WEBHOOK_SECRET/versions/1","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync","PRODUCTS_COLLECTION":"products","DELETE_STRIPE_CUSTOMERS":"Do not delete","CUSTOMERS_COLLECTION":"customers","CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","LOCATION":"us-central1","STRIPE_API_KEY":"projects/205912587561/secrets/firestore-stripe-payments-STRIPE_API_KEY/versions/1"},"populatedPostinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/insilico-surveys/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /customers/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /products/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `https://us-central1-insilico-surveys.cloudfunctions.net/ext-firestore-stripe-payments-handleWebhookEvents`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/insilico-surveys/extensions/instances/firestore-stripe-payments?tab=config) your extension with your webhookâ€™s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('products')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `customers/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `customers/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customerâ€™s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('customers')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('us-central1')\n  .httpsCallable('ext-firestore-stripe-payments-createPortalLink');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","extensionRef":"stripe/firestore-stripe-payments","extensionVersion":"0.3.4","allowedEventTypes":["com.stripe.v1.checkout.session.async_payment_failed","com.stripe.v1.checkout.session.async_payment_succeeded","com.stripe.v1.checkout.session.completed","com.stripe.v1.customer.subscription.created","com.stripe.v1.customer.subscription.deleted","com.stripe.v1.customer.subscription.updated","com.stripe.v1.invoice.paid","com.stripe.v1.invoice.payment_failed","com.stripe.v1.invoice.payment_succeeded"],"eventarcChannel":"projects/insilico-surveys/locations/us-central1/channels/firebase","systemParams":{"firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/memory":"256"}},"errorStatus":{"code":13,"message":"; RESOURCE_ERROR at /deployments/firebase-ext-firestore-stripe-payments/resources/createCheckoutSession: {\"ResourceType\":\"gcp-types/cloudfunctions-v1:projects.locations.functions\",\"ResourceErrorCode\":\"500\",\"ResourceErrorMessage\":\"Gen1 operation for function projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-createCheckoutSession failed: Build failed: com.google.net.rpc3.client.RpcClientException: <eye3 title='/ArgoAdminNoCloudAudit.CreateBuild, INTERNAL'/> CLIENT_ERROR;google.devtools.cloudbuild.v1/ArgoAdminNoCloudAudit.CreateBuild;projects/-/serviceAccounts/116636493544401350510 can not be accessed by IAM. Please ensure it exists. If this is a new resource or recently had IAM changes, please retry in accordance with https://cloud.google.com/iam/docs/access-change-propagation.;StartTimeMs=1738606552835;unknown;ResFormat=uncompressed;NoServerTime;LogBytes=256;Non-FailFast;EndUserCredsRequested;EffSecLevel=privacy_and_integrity;ReqFormat=uncompressed;ReqID=44ee02ec1f116a4e;GlobalID=0;Server=[2002:a05:6670:5f07:b0:a5e:3a4b:1924]:4001\\n\\tSuppressed: CriticalInputFailure: com.google.cloud.build.api.service.CreateBuildAction.produceMaybeResultWrite failed while trying to inject @com.google.cloud.build.api.service.CreateBuildAction$FromBuildBackend com.google.longrunning.Operation\\n\\tSuppressed: CriticalInputFailure: com.google.cloud.build.api.service.CreateBuildAction.produceFinalResult failed while trying to inject @com.google.cloud.build.api.service.CreateBuildAction$FromBuildBackend com.google.longrunning.Operation\\n\\tSuppressed: com.google.common.labs.concurrent.LabsFutures$LabeledExecutionException: GraphFuture{key=@com.google.cloud.build.api.service.CreateBuildAction$FinalResult com.google.longrunning.Operation} failed: com.google.net.rpc3.client.RpcClientException: <eye3 title='/ArgoAdminNoCloudAudit.CreateBuild, INTERNAL'/> CLIENT_ERROR;google.devtools.cloudbuild.v1/ArgoAdminNoCloudAudit.CreateBuild;projects/-/serviceAccounts/116636493544401350510 can not be accessed by IAM. Please ensure it exists. If this is a new resource or recently had IAM changes, please retry in accordance with https://cloud.google.com/iam/docs/access-change-propagation.;StartTimeMs=1738606552835;unknown;ResFormat=uncompressed;NoServerTime;LogBytes=256;Non-FailFast;EndUserCredsRequested;EffSecLevel=privacy_and_integrity;ReqFormat=uncompressed;ReqID=44ee02ec1f116a4e;GlobalID=0;Server=[2002:a05:6670:5f07:b0:a5e:3a4b:1924]:4001\\n.\"}; RESOURCE_ERROR at /deployments/firebase-ext-firestore-stripe-payments/resources/onCustomerDataDeleted: {\"ResourceType\":\"gcp-types/cloudfunctions-v1:projects.locations.functions\",\"ResourceErrorCode\":\"500\",\"ResourceErrorMessage\":\"Gen1 operation for function projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-onCustomerDataDeleted failed: Build failed: com.google.net.rpc3.client.RpcClientException: <eye3 title='/ArgoAdminNoCloudAudit.CreateBuild, INTERNAL'/> CLIENT_ERROR;google.devtools.cloudbuild.v1/ArgoAdminNoCloudAudit.CreateBuild;projects/-/serviceAccounts/116636493544401350510 can not be accessed by IAM. Please ensure it exists. If this is a new resource or recently had IAM changes, please retry in accordance with https://cloud.google.com/iam/docs/access-change-propagation.;StartTimeMs=1738606552910;unknown;ResFormat=uncompressed;NoServerTime;LogBytes=256;Non-FailFast;EndUserCredsRequested;EffSecLevel=privacy_and_integrity;ReqFormat=uncompressed;ReqID=772217759bf78627;GlobalID=0;Server=[2002:a05:6671:504a:b0:a74:47f8:6aee]:4001\\n\\tSuppressed: CriticalInputFailure: com.google.cloud.build.api.service.CreateBuildAction.produceMaybeResultWrite failed while trying to inject @com.google.cloud.build.api.service.CreateBuildAction$FromBuildBackend com.google.longrunning.Operation\\n\\tSuppressed: CriticalInputFailure: com.google.cloud.build.api.service.CreateBuildAction.produceFinalResult failed while trying to inject @com.google.cloud.build.api.service.CreateBuildAction$FromBuildBackend com.google.longrunning.Operation\\n\\tSuppressed: com.google.common.labs.concurrent.LabsFutures$LabeledExecutionException: GraphFuture{key=@com.google.cloud.build.api.service.CreateBuildAction$FinalResult com.google.longrunning.Operation} failed: com.google.net.rpc3.client.RpcClientException: <eye3 title='/ArgoAdminNoCloudAudit.CreateBuild, INTERNAL'/> CLIENT_ERROR;google.devtools.cloudbuild.v1/ArgoAdminNoCloudAudit.CreateBuild;projects/-/serviceAccounts/116636493544401350510 can not be accessed by IAM. Please ensure it exists. If this is a new resource or recently had IAM changes, please retry in accordance with https://cloud.google.com/iam/docs/access-change-propagation.;StartTimeMs=1738606552910;unknown;ResFormat=uncompressed;NoServerTime;LogBytes=256;Non-FailFast;EndUserCredsRequested;EffSecLevel=privacy_and_integrity;ReqFormat=uncompressed;ReqID=772217759bf78627;GlobalID=0;Server=[2002:a05:6671:504a:b0:a74:47f8:6aee]:4001\\n.\"}; RESOURCE_ERROR at /deployments/firebase-ext-firestore-stripe-payments/resources/onUserDeleted: {\"ResourceType\":\"gcp-types/cloudfunctions-v1:projects.locations.functions\",\"ResourceErrorCode\":\"500\",\"ResourceErrorMessage\":\"Gen1 operation for function projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-onUserDeleted failed: Build failed: com.google.net.rpc3.client.RpcClientException: <eye3 title='/ArgoAdminNoCloudAudit.CreateBuild, INTERNAL'/> CLIENT_ERROR;google.devtools.cloudbuild.v1/ArgoAdminNoCloudAudit.CreateBuild;projects/-/serviceAccounts/116636493544401350510 can not be accessed by IAM. Please ensure it exists. If this is a new resource or recently had IAM changes, please retry in accordance with https://cloud.google.com/iam/docs/access-change-propagation.;StartTimeMs=1738606552805;unknown;ResFormat=uncompressed;NoServerTime;LogBytes=256;Non-FailFast;EndUserCredsRequested;EffSecLevel=privacy_and_integrity;ReqFormat=uncompressed;ReqID=cb7c234c56405472;GlobalID=0;Server=[2002:a05:6670:5f07:b0:a5e:3a4b:1924]:4001\\n\\tSuppressed: CriticalInputFailure: com.google.cloud.build.api.service.CreateBuildAction.produceMaybeResultWrite failed while trying to inject @com.google.cloud.build.api.service.CreateBuildAction$FromBuildBackend com.google.longrunning.Operation\\n\\tSuppressed: CriticalInputFailure: com.google.cloud.build.api.service.CreateBuildAction.produceFinalResult failed while trying to inject @com.google.cloud.build.api.service.CreateBuildAction$FromBuildBackend com.google.longrunning.Operation\\n\\tSuppressed: com.google.common.labs.concurrent.LabsFutures$LabeledExecutionException: GraphFuture{key=@com.google.cloud.build.api.service.CreateBuildAction$FinalResult com.google.longrunning.Operation} failed: com.google.net.rpc3.client.RpcClientException: <eye3 title='/ArgoAdminNoCloudAudit.CreateBuild, INTERNAL'/> CLIENT_ERROR;google.devtools.cloudbuild.v1/ArgoAdminNoCloudAudit.CreateBuild;projects/-/serviceAccounts/116636493544401350510 can not be accessed by IAM. Please ensure it exists. If this is a new resource or recently had IAM changes, please retry in accordance with https://cloud.google.com/iam/docs/access-change-propagation.;StartTimeMs=1738606552805;unknown;ResFormat=uncompressed;NoServerTime;LogBytes=256;Non-FailFast;EndUserCredsRequested;EffSecLevel=privacy_and_integrity;ReqFormat=uncompressed;ReqID=cb7c234c56405472;GlobalID=0;Server=[2002:a05:6670:5f07:b0:a5e:3a4b:1924]:4001\\n.\"}"},"lastOperationName":"projects/insilico-surveys/operations/fb8530b7-2ad2-4392-b272-c6045902ff3f","serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","lastOperationType":"CREATE","etag":"abef5e5beaff7024918e10dda8e1766eb22b2e7ceee7289496b89c19590dcb8e"},{"name":"projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","createTime":"2025-02-03T18:22:22.707603Z","updateTime":"2025-02-03T18:28:11.843887Z","state":"ACTIVE","config":{"name":"projects/insilico-surveys/instances/firestore-stripe-payments-tuh4/configurations/9f16d17a-c907-441b-9fce-4f9198041d55","createTime":"2025-02-03T18:22:22.707603Z","source":{"name":"projects/invertase-firebase-extensions/sources/75c1a696-e5cd-4596-a6a2-f4494369a9b4","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/invertase-firestore-stripe-payments-0.3.9-c1123737-1554-4d62-8b40-69328c3f8da7.zip","hash":"cfa3a575174aabf311c39d7c142b0487b122f2b529538bf4e11e0e976523f190","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.9","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs18\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Invertase","url":"https://invertase.io"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   2. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   3. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n2. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhookâ€™s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`. Make sure you scroll back to the top of the Extension configuration page and click 'Save' otherwise your Stripe webhook secret will not be saved.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n2. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n3. Toggle on \"Allow customers to update their payment methods\".\n4. Toggle on \"Allow customers to update subscriptions\".\n5. Toggle on \"Allow customers to cancel subscriptions\".\n6. Add the products and prices that you want to allow customer to switch between.\n7. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection(\"${param:PRODUCTS_COLLECTION}\")\n  .where(\"active\", \"==\", true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, \" => \", doc.data());\n      const priceSnap = await doc.ref.collection(\"prices\").get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, \" => \", doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nYou can specify subscription trial period when creating the checkout session by using the `trial_period_days` parameter. Refer to the [docs](https://stripe.com/docs/payments/checkout/free-trials) for a detailed guide on free trials and how to set them up.\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_period_days: 7,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customerâ€™s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\n          \"txr_1IJJtvHYgolSBA35ITTBOaew\",\n          \"txr_1Hlsk0HYgolSBA35rlraUVWO\",\n          \"txr_1HCshzHYgolSBA35WkPjzOOi\",\n        ],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: \"item001\",\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\", // RECURRING_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n      {\n        price: \"price_1HEtgDHYgolSBA35LMkO3ExX\", // ONE_TIME_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"subscriptions\")\n  .where(\"status\", \"in\", [\"trialing\", \"active\"])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, \" => \", doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions(\"${param:LOCATION}\")\n  .httpsCallable(\"${function:createPortalLink.name}\");\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Payments with Stripe\n\n**Author**: Invertase (**[https://invertase.io](https://invertase.io)**)\n\n**Description**: Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n**Configuration Parameters:**\n\n- Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n- Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n- Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n- Stripe configuration collection: What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?\n\n- Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n- Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n- Stripe API key with restricted access: What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n- Stripe webhook secret: This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.\n\n- Minimum instances for createCheckoutSession function: Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.\n\n**Cloud Functions:**\n\n- **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n- **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n- **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n- **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n- **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n- **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n**Access Required**:\n\nThis extension will operate with the following project IAM roles:\n\n- firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n- datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically chargedâ€”where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"icon":"icon.png","tags":["payments"]},"fetchTime":"2024-02-14T14:27:36.305996Z","lastOperationName":"projects/invertase-firebase-extensions/operations/16fd0e29-8130-4075-87e6-34a933edb134","state":"ACTIVE","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/invertase/firestore-stripe-payments_0.3.9@512.png"},"params":{"PRODUCTS_COLLECTION":"products","CUSTOMERS_COLLECTION":"customers","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync","DELETE_STRIPE_CUSTOMERS":"Do not delete","STRIPE_API_KEY":"projects/205912587561/secrets/firestore-stripe-payments-tuh4-STRIPE_API_KEY/versions/1","CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","LOCATION":"us-central1"},"populatedPostinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/insilico-surveys/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /customers/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /products/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   2. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `https://us-central1-insilico-surveys.cloudfunctions.net/ext-firestore-stripe-payments-tuh4-handleWebhookEvents`\n\n   3. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n2. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/insilico-surveys/extensions/instances/firestore-stripe-payments-tuh4?tab=config) your extension with your webhookâ€™s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`. Make sure you scroll back to the top of the Extension configuration page and click 'Save' otherwise your Stripe webhook secret will not be saved.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n2. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n3. Toggle on \"Allow customers to update their payment methods\".\n4. Toggle on \"Allow customers to update subscriptions\".\n5. Toggle on \"Allow customers to cancel subscriptions\".\n6. Add the products and prices that you want to allow customer to switch between.\n7. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection(\"products\")\n  .where(\"active\", \"==\", true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, \" => \", doc.data());\n      const priceSnap = await doc.ref.collection(\"prices\").get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, \" => \", doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `customers/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `customers/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nYou can specify subscription trial period when creating the checkout session by using the `trial_period_days` parameter. Refer to the [docs](https://stripe.com/docs/payments/checkout/free-trials) for a detailed guide on free trials and how to set them up.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_period_days: 7,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customerâ€™s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\n          \"txr_1IJJtvHYgolSBA35ITTBOaew\",\n          \"txr_1Hlsk0HYgolSBA35rlraUVWO\",\n          \"txr_1HCshzHYgolSBA35WkPjzOOi\",\n        ],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: \"item001\",\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\", // RECURRING_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n      {\n        price: \"price_1HEtgDHYgolSBA35LMkO3ExX\", // ONE_TIME_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"subscriptions\")\n  .where(\"status\", \"in\", [\"trialing\", \"active\"])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, \" => \", doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions(\"us-central1\")\n  .httpsCallable(\"ext-firestore-stripe-payments-tuh4-createPortalLink\");\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","extensionRef":"invertase/firestore-stripe-payments","extensionVersion":"0.3.9","allowedEventTypes":["com.stripe.v1.checkout.session.async_payment_failed","com.stripe.v1.checkout.session.async_payment_succeeded","com.stripe.v1.checkout.session.completed","com.stripe.v1.invoice.paid","com.stripe.v1.invoice.payment_succeeded","com.stripe.v1.price.created","com.stripe.v1.price.updated","com.stripe.v1.product.created","com.stripe.v1.product.updated"],"eventarcChannel":"projects/insilico-surveys/locations/us-central1/channels/firebase","systemParams":{"firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/memory":"256"}},"lastOperationName":"projects/insilico-surveys/operations/8a1c0548-74da-4ace-b95e-2622ed33b3a6","serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","lastOperationType":"CREATE","etag":"f89b6818a234943ab1e5aa45585f74840013ac1e4a0432322067e5fb1e3921f5"}]}
[info] i  functions: preparing functions directory for uploading... 
[info] i  functions: packaged /Users/sam/insilico-surveys-1/functions (62.74 KB) for uploading 
[debug] [2025-02-18T00:08:51.176Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:51.176Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:51.176Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v1/projects/insilico-surveys/locations/-/functions [none]
[debug] [2025-02-18T00:08:51.804Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v1/projects/insilico-surveys/locations/-/functions 200
[debug] [2025-02-18T00:08:51.805Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v1/projects/insilico-surveys/locations/-/functions {"functions":[{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-createCheckoutSession","description":"Creates a Checkout session to collect the customer's payment details.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/06675f6381bd830478138c4e5145367a2bacc940ac3505cbf8e00bd10680e784","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.create","resource":"projects/insilico-surveys/databases/(default)/documents/customers/{uid}/checkout_sessions/{id}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"OFFLINE","entryPoint":"createCheckoutSession","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:16:14.972638355Z","versionId":"1","labels":{"deployment-tool":"firebase-extensions","firebase-extensions-ar":"enabled","goog-firebase-ext":"firestore-stripe-payments","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.customer.subscription.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.payment_succeeded","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"1"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"1"}],"dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-tuh4-createCheckoutSession","description":"Creates a Checkout session to collect the customer's payment details.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/e68d0f3e28f0831eab9e9d54a3e037e437f5e0f13f92ce4b62889829545bfd9a","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.create","resource":"projects/insilico-surveys/databases/(default)/documents/customers/{uid}/checkout_sessions/{id}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"createCheckoutSession","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:26:55.476Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments-tuh4","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments-tuh4"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","EXT_INSTANCE_ID":"firestore-stripe-payments-tuh4","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.product.created,com.stripe.v1.product.updated","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"725d548d-5859-4b4f-a79c-66faa6873a46","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-tuh4-STRIPE_API_KEY","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/725d548d-5859-4b4f-a79c-66faa6873a46","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-createCustomer","description":"Creates a Stripe customer object when a new user signs up.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/06675f6381bd830478138c4e5145367a2bacc940ac3505cbf8e00bd10680e784","eventTrigger":{"eventType":"providers/firebase.auth/eventTypes/user.create","resource":"projects/insilico-surveys","service":"firebaseauth.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"createCustomer","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:18:40.085Z","versionId":"2","labels":{"goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments","firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.customer.subscription.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.payment_succeeded","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"563cc80c-e071-44b1-b67b-4c24b6c2ee81","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"1"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/563cc80c-e071-44b1-b67b-4c24b6c2ee81","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-tuh4-onUserDeleted","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/e68d0f3e28f0831eab9e9d54a3e037e437f5e0f13f92ce4b62889829545bfd9a","eventTrigger":{"eventType":"providers/firebase.auth/eventTypes/user.delete","resource":"projects/insilico-surveys","service":"firebaseauth.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"onUserDeleted","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:26:28.462Z","versionId":"2","labels":{"goog-dm":"firebase-ext-firestore-stripe-payments-tuh4","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments-tuh4","firebase-extensions-ar":"enabled"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","EXT_INSTANCE_ID":"firestore-stripe-payments-tuh4","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.product.created,com.stripe.v1.product.updated","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"d25e7563-14f6-44b3-a17b-73f6a877f567","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-tuh4-STRIPE_API_KEY","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/d25e7563-14f6-44b3-a17b-73f6a877f567","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-handleWebhookEvents","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/06675f6381bd830478138c4e5145367a2bacc940ac3505cbf8e00bd10680e784","httpsTrigger":{"url":"https://us-central1-insilico-surveys.cloudfunctions.net/ext-firestore-stripe-payments-handleWebhookEvents","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"handleWebhookEvents","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:18:37.535Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.customer.subscription.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.payment_succeeded","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","ingressSettings":"ALLOW_ALL","buildId":"40c6342d-e902-4d35-a76e-954f23debcda","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"1"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/40c6342d-e902-4d35-a76e-954f23debcda","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-onCustomerDataDeleted","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/06675f6381bd830478138c4e5145367a2bacc940ac3505cbf8e00bd10680e784","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.delete","resource":"projects/insilico-surveys/databases/(default)/documents/customers/{uid}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"OFFLINE","entryPoint":"onCustomerDataDeleted","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:16:14.889472726Z","versionId":"1","labels":{"deployment-tool":"firebase-extensions","firebase-extensions-ar":"enabled","goog-firebase-ext":"firestore-stripe-payments","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.customer.subscription.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.payment_succeeded","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_WEBHOOK_SECRET","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"1"},{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"1"}],"dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-tuh4-onCustomerDataDeleted","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/e68d0f3e28f0831eab9e9d54a3e037e437f5e0f13f92ce4b62889829545bfd9a","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.delete","resource":"projects/insilico-surveys/databases/(default)/documents/customers/{uid}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"onCustomerDataDeleted","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:27:49.546Z","versionId":"2","labels":{"goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments-tuh4","firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments-tuh4"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","EXT_INSTANCE_ID":"firestore-stripe-payments-tuh4","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.product.created,com.stripe.v1.product.updated","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"01688d0d-0fc9-4f2c-b6d6-797ff491237e","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-tuh4-STRIPE_API_KEY","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/01688d0d-0fc9-4f2c-b6d6-797ff491237e","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-tuh4-createPortalLink","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/e68d0f3e28f0831eab9e9d54a3e037e437f5e0f13f92ce4b62889829545bfd9a","httpsTrigger":{"url":"https://us-central1-insilico-surveys.cloudfunctions.net/ext-firestore-stripe-payments-tuh4-createPortalLink","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"createPortalLink","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:26:50.368Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments-tuh4","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments-tuh4"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","EXT_INSTANCE_ID":"firestore-stripe-payments-tuh4","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.product.created,com.stripe.v1.product.updated","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs18","ingressSettings":"ALLOW_ALL","buildId":"73c6f390-079d-4f26-858e-7b4298c3f594","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-tuh4-STRIPE_API_KEY","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/73c6f390-079d-4f26-858e-7b4298c3f594","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-createPortalLink","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/06675f6381bd830478138c4e5145367a2bacc940ac3505cbf8e00bd10680e784","httpsTrigger":{"url":"https://us-central1-insilico-surveys.cloudfunctions.net/ext-firestore-stripe-payments-createPortalLink","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"createPortalLink","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:18:39.138Z","versionId":"2","labels":{"goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments","firebase-extensions-ar":"enabled"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.customer.subscription.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.payment_succeeded","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","ingressSettings":"ALLOW_ALL","buildId":"332f326b-8b81-4f73-a966-553178442360","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"1"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/332f326b-8b81-4f73-a966-553178442360","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-tuh4-handleWebhookEvents","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/e68d0f3e28f0831eab9e9d54a3e037e437f5e0f13f92ce4b62889829545bfd9a","httpsTrigger":{"url":"https://us-central1-insilico-surveys.cloudfunctions.net/ext-firestore-stripe-payments-tuh4-handleWebhookEvents","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"handleWebhookEvents","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:26:18.030Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments-tuh4","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments-tuh4"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","EXT_INSTANCE_ID":"firestore-stripe-payments-tuh4","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.product.created,com.stripe.v1.product.updated","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs18","ingressSettings":"ALLOW_ALL","buildId":"8c2d05d7-d4af-4611-bae0-a671142d2106","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-tuh4-STRIPE_API_KEY","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/8c2d05d7-d4af-4611-bae0-a671142d2106","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-onUserDeleted","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/06675f6381bd830478138c4e5145367a2bacc940ac3505cbf8e00bd10680e784","eventTrigger":{"eventType":"providers/firebase.auth/eventTypes/user.delete","resource":"projects/insilico-surveys","service":"firebaseauth.googleapis.com","failurePolicy":{}},"status":"OFFLINE","entryPoint":"onUserDeleted","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:16:13.251300280Z","versionId":"1","labels":{"deployment-tool":"firebase-extensions","firebase-extensions-ar":"enabled","goog-firebase-ext":"firestore-stripe-payments","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.customer.subscription.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.payment_succeeded","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"1"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"205912587561","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"1"}],"dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"},{"name":"projects/insilico-surveys/locations/us-central1/functions/ext-firestore-stripe-payments-tuh4-createCustomer","description":"Creates a Stripe customer object when a new user signs up.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/e68d0f3e28f0831eab9e9d54a3e037e437f5e0f13f92ce4b62889829545bfd9a","eventTrigger":{"eventType":"providers/firebase.auth/eventTypes/user.create","resource":"projects/insilico-surveys","service":"firebaseauth.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"createCustomer","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-paym-jyba@insilico-surveys.iam.gserviceaccount.com","updateTime":"2025-02-03T18:26:39.139Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments-tuh4","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments-tuh4"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/insilico-surveys/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/insilico-surveys/instances/firestore-stripe-payments-tuh4","EXT_INSTANCE_ID":"firestore-stripe-payments-tuh4","EXT_SELECTED_EVENTS":"com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.completed,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.product.created,com.stripe.v1.product.updated","FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"databaseURL\":\"\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"insilico-surveys","STORAGE_BUCKET":"insilico-surveys.firebasestorage.app","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs18","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"6389b11c-fffe-454c-a073-29c12c85f9d3","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"205912587561","secret":"firestore-stripe-payments-tuh4-STRIPE_API_KEY","version":"1"}],"buildName":"projects/205912587561/locations/us-central1/builds/6389b11c-fffe-454c-a073-29c12c85f9d3","dockerRegistry":"ARTIFACT_REGISTRY","automaticUpdatePolicy":{},"buildServiceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com"}]}
[debug] [2025-02-18T00:08:51.806Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:51.806Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:51.806Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/-/functions filter=environment%3D%22GEN_2%22
[debug] [2025-02-18T00:08:52.267Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/-/functions 200
[debug] [2025-02-18T00:08:52.267Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/-/functions {"functions":[{"name":"projects/insilico-surveys/locations/us-central1/functions/handleStripeCheckoutCompleted","buildConfig":{"build":"projects/205912587561/locations/us-central1/builds/ecc0e94c-1a06-483b-b8c3-6c71332fbd94","runtime":"nodejs22","entryPoint":"handleStripeCheckoutCompleted","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"handleStripeCheckoutCompleted/function-source.zip","generation":"1738701384581061"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"handleStripeCheckoutCompleted/function-source.zip","generation":"1738701384581061"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"state":"UNKNOWN","updateTime":"2025-02-04T20:45:02.322992721Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"cd746c4255cc35af77bca1d1b22d04ec3210eff2"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/handlestripecheckoutcompleted for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/handleStripeCheckoutCompleted","createTime":"2025-02-04T20:36:24.880907757Z","satisfiesPzi":true},{"name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"build":"projects/205912587561/locations/us-central1/builds/93c434c4-3ef7-46ba-870a-9685a5a6c1d4","runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"state":"FAILED","updateTime":"2025-02-04T20:44:16.435414736Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"cd746c4255cc35af77bca1d1b22d04ec3210eff2"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","createTime":"2025-02-04T20:43:31.330601910Z","satisfiesPzi":true},{"name":"projects/insilico-surveys/locations/us-central1/functions/createCheckoutSession","buildConfig":{"build":"projects/205912587561/locations/us-central1/builds/ecc0e94c-1a06-483b-b8c3-6c71332fbd94","runtime":"nodejs22","entryPoint":"createCheckoutSession","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"createCheckoutSession/function-source.zip","generation":"1738701443317568"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"createCheckoutSession/function-source.zip","generation":"1738701443317568"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"state":"FAILED","updateTime":"2025-02-04T20:37:37.752044291Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"4325b59e8d1218bebed4781fd60d1e840b6b764d"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/createcheckoutsession for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/createCheckoutSession","createTime":"2025-02-04T20:37:23.538585677Z","satisfiesPzi":true}]}
[info] i  functions: ensuring required API run.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[info] i  functions: ensuring required API eventarc.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[info] i  functions: ensuring required API pubsub.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[info] i  functions: ensuring required API storage.googleapis.com is enabled... 
[debug] [2025-02-18T00:08:52.269Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.270Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.270Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/run.googleapis.com [none]
[debug] [2025-02-18T00:08:52.270Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/run.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:52.270Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/eventarc.googleapis.com [none]
[debug] [2025-02-18T00:08:52.270Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/eventarc.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:52.272Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/pubsub.googleapis.com [none]
[debug] [2025-02-18T00:08:52.272Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/pubsub.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:52.272Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/storage.googleapis.com [none]
[debug] [2025-02-18T00:08:52.273Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/storage.googleapis.com x-goog-quota-user=projects/insilico-surveys
[debug] [2025-02-18T00:08:52.605Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/run.googleapis.com 200
[debug] [2025-02-18T00:08:52.605Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/run.googleapis.com [omitted]
[info] âœ”  functions: required API run.googleapis.com is enabled 
[debug] [2025-02-18T00:08:52.609Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/storage.googleapis.com 200
[debug] [2025-02-18T00:08:52.609Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/storage.googleapis.com [omitted]
[info] âœ”  functions: required API storage.googleapis.com is enabled 
[debug] [2025-02-18T00:08:52.634Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/eventarc.googleapis.com 200
[debug] [2025-02-18T00:08:52.634Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/eventarc.googleapis.com [omitted]
[info] âœ”  functions: required API eventarc.googleapis.com is enabled 
[debug] [2025-02-18T00:08:52.635Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/pubsub.googleapis.com 200
[debug] [2025-02-18T00:08:52.635Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/insilico-surveys/services/pubsub.googleapis.com [omitted]
[info] âœ”  functions: required API pubsub.googleapis.com is enabled 
[info] i  functions: generating the service identity for pubsub.googleapis.com... 
[debug] [2025-02-18T00:08:52.635Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.635Z] Checked if tokens are valid: true, expires at: 1739840921526
[info] i  functions: generating the service identity for eventarc.googleapis.com... 
[debug] [2025-02-18T00:08:52.635Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.635Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:52.635Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/205912587561/services/pubsub.googleapis.com:generateServiceIdentity [none]
[debug] [2025-02-18T00:08:52.636Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/205912587561/services/eventarc.googleapis.com:generateServiceIdentity [none]
[debug] [2025-02-18T00:08:53.191Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/205912587561/services/eventarc.googleapis.com:generateServiceIdentity 200
[debug] [2025-02-18T00:08:53.191Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/205912587561/services/eventarc.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-205912587561@gcp-sa-eventarc.iam.gserviceaccount.com","uniqueId":"117043054709549586840"}}
[debug] [2025-02-18T00:08:53.191Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/205912587561/services/pubsub.googleapis.com:generateServiceIdentity 200
[debug] [2025-02-18T00:08:53.191Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/205912587561/services/pubsub.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-205912587561@gcp-sa-pubsub.iam.gserviceaccount.com","uniqueId":"103677747767831604312"}}
[debug] [2025-02-18T00:08:53.193Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:53.193Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:53.193Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys [none]
[debug] [2025-02-18T00:08:53.309Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys 200
[debug] [2025-02-18T00:08:53.310Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/insilico-surveys {"projectNumber":"205912587561","projectId":"insilico-surveys","lifecycleState":"ACTIVE","name":"insilico-surveys","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2025-02-03T03:06:41.965268Z"}
[debug] [2025-02-18T00:08:53.314Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:53.314Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:53.314Z] >>> [apiv2][query] GET https://cloudbilling.googleapis.com/v1/projects/insilico-surveys/billingInfo [none]
[debug] [2025-02-18T00:08:53.533Z] <<< [apiv2][status] GET https://cloudbilling.googleapis.com/v1/projects/insilico-surveys/billingInfo 200
[debug] [2025-02-18T00:08:53.533Z] <<< [apiv2][body] GET https://cloudbilling.googleapis.com/v1/projects/insilico-surveys/billingInfo {"name":"projects/insilico-surveys/billingInfo","projectId":"insilico-surveys","billingAccountName":"billingAccounts/01229F-11AA78-7BCB9D","billingEnabled":true}
[debug] [2025-02-18T00:08:53.534Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:53.534Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:53.535Z] >>> [apiv2][query] POST https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions:generateUploadUrl [none]
[debug] [2025-02-18T00:08:53.924Z] <<< [apiv2][status] POST https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions:generateUploadUrl 200
[debug] [2025-02-18T00:08:53.925Z] <<< [apiv2][body] POST https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions:generateUploadUrl {"uploadUrl":"https://storage.googleapis.com/gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com/fe3f7641-7960-4965-9926-01c3565afadc.zip?GoogleAccessId=service-205912587561@gcf-admin-robot.iam.gserviceaccount.com&Expires=1739839133&Signature=0ejZTZzMHM1k4PU6uI19kQ2FRnuRyjFh8Jak55rEdw%2FO2KNUqwY91rRYMjvegZIu5RwbWisUQX46nHbHdWg3%2BmwGlIkbGyTidxGxlh5Y9TeZlXyQyd%2Bo%2FS0E7X7Qzd0hPQRsLsr3kaDsrl%2FktzrEN0X600fO0YQimWzBS1iy30F6pXJK%2BLLl9vofMl%2FhZqv4WtkVXqZGxJhA9bDG1rQRHGsjtb5sOIauPfHgnhlfJ3frFFqpU%2FER4bYGOQqXnFuu%2FTIv%2Byjw9Q1BxRqhxIrbYLU0Ozm4rMAo2g5Jn2dDMa2Jrboi6booTUleQiInBIY1sL1lkP7qa2h2BJClygBHTQ%3D%3D","storageSource":{"bucket":"gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com","object":"fe3f7641-7960-4965-9926-01c3565afadc.zip"}}
[debug] [2025-02-18T00:08:53.926Z] >>> [apiv2][query] PUT https://storage.googleapis.com/gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com/fe3f7641-7960-4965-9926-01c3565afadc.zip GoogleAccessId=service-205912587561%40gcf-admin-robot.iam.gserviceaccount.com&Expires=1739839133&Signature=0ejZTZzMHM1k4PU6uI19kQ2FRnuRyjFh8Jak55rEdw%2FO2KNUqwY91rRYMjvegZIu5RwbWisUQX46nHbHdWg3%2BmwGlIkbGyTidxGxlh5Y9TeZlXyQyd%2Bo%2FS0E7X7Qzd0hPQRsLsr3kaDsrl%2FktzrEN0X600fO0YQimWzBS1iy30F6pXJK%2BLLl9vofMl%2FhZqv4WtkVXqZGxJhA9bDG1rQRHGsjtb5sOIauPfHgnhlfJ3frFFqpU%2FER4bYGOQqXnFuu%2FTIv%2Byjw9Q1BxRqhxIrbYLU0Ozm4rMAo2g5Jn2dDMa2Jrboi6booTUleQiInBIY1sL1lkP7qa2h2BJClygBHTQ%3D%3D
[debug] [2025-02-18T00:08:53.926Z] >>> [apiv2][body] PUT https://storage.googleapis.com/gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com/fe3f7641-7960-4965-9926-01c3565afadc.zip [stream]
[debug] [2025-02-18T00:08:54.206Z] <<< [apiv2][status] PUT https://storage.googleapis.com/gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com/fe3f7641-7960-4965-9926-01c3565afadc.zip 200
[debug] [2025-02-18T00:08:54.206Z] <<< [apiv2][body] PUT https://storage.googleapis.com/gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com/fe3f7641-7960-4965-9926-01c3565afadc.zip [omitted]
[info] âœ”  functions: functions folder uploaded successfully 
[info] i  functions: updating Node.js 20 (2nd Gen) function api(us-central1)... 
[debug] [2025-02-18T00:08:54.212Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:54.212Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:54.213Z] >>> [apiv2][query] PATCH https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions/api updateMask=name%2CbuildConfig.runtime%2CbuildConfig.entryPoint%2CbuildConfig.source.storageSource.bucket%2CbuildConfig.source.storageSource.object%2CbuildConfig.environmentVariables%2CbuildConfig.sourceToken%2CserviceConfig.environmentVariables%2CserviceConfig.ingressSettings%2CserviceConfig.timeoutSeconds%2CserviceConfig.serviceAccountEmail%2CserviceConfig.availableMemory%2CserviceConfig.minInstanceCount%2CserviceConfig.maxInstanceCount%2CserviceConfig.maxInstanceRequestConcurrency%2CserviceConfig.availableCpu%2CserviceConfig.vpcConnector%2CserviceConfig.vpcConnectorEgressSettings%2Clabels%2CbuildConfig.buildEnvironmentVariables
[debug] [2025-02-18T00:08:54.213Z] >>> [apiv2][body] PATCH https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions/api {"name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-uploads-205912587561.us-central1.cloudfunctions.appspot.com","object":"fe3f7641-7960-4965-9926-01c3565afadc.zip"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""}},"serviceConfig":{"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api"},"ingressSettings":null,"timeoutSeconds":null,"serviceAccountEmail":null,"availableMemory":"256Mi","minInstanceCount":null,"maxInstanceCount":null,"maxInstanceRequestConcurrency":80,"availableCpu":"1","vpcConnector":null,"vpcConnectorEgressSettings":null},"labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"}}
[debug] [2025-02-18T00:08:55.483Z] <<< [apiv2][status] PATCH https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions/api 200
[debug] [2025-02-18T00:08:55.483Z] <<< [apiv2][body] PATCH https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/functions/api {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2"},"done":false}
[debug] [2025-02-18T00:08:55.484Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:55.484Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:55.484Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:08:55.697Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:08:55.697Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","state":"NOT_STARTED"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION"},"done":false}
[debug] [2025-02-18T00:08:56.199Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:08:56.200Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:56.200Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:56.200Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:08:56.285Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:08:56.285Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Creating build","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:08:57.287Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:08:57.288Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:57.288Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:57.288Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:08:57.368Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:08:57.369Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:08:59.370Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:08:59.371Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:59.371Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:08:59.371Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:08:59.435Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:08:59.435Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:09:03.437Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:09:03.438Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:03.439Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:03.439Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:09:03.623Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:09:03.623Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:09:11.626Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:09:11.628Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:11.628Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:11.629Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:09:11.867Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:09:11.867Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:09:21.869Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:09:21.870Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:21.870Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:21.870Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:09:21.995Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:09:21.995Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:09:31.997Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:09:31.999Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:31.999Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:31.999Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:09:32.238Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:09:32.238Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"BUILD","message":"Build in progress","state":"IN_PROGRESS","resource":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429","resourceUri":"https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561"},{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION","buildName":"projects/205912587561/locations/us-central1/builds/f708ecdc-af23-467a-9a63-2b0f88625429"},"done":false}
[debug] [2025-02-18T00:09:42.239Z] [update-default-us-central1-api] Retrying task index 0
[debug] [2025-02-18T00:09:42.242Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.242Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.243Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 [none]
[debug] [2025-02-18T00:09:42.471Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 200
[debug] [2025-02-18T00:09:42.471Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024 {"name":"projects/insilico-surveys/locations/us-central1/operations/operation-1739837334407-62e5f7248c76c-4eeb8458-7c77d024","metadata":{"@type":"type.googleapis.com/google.cloud.functions.v2.OperationMetadata","createTime":"2025-02-18T00:08:55.458683215Z","endTime":"2025-02-18T00:09:39.397230163Z","target":"projects/insilico-surveys/locations/us-central1/functions/api","verb":"update","cancelRequested":false,"apiVersion":"v2","requestResource":{"@type":"type.googleapis.com/google.cloud.functions.v2.Function","name":"projects/insilico-surveys/locations/us-central1/functions/api","buildConfig":{"runtime":"nodejs20","entryPoint":"api","source":{"storageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1739837335305590"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"dockerRepository":"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts","sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-205912587561-us-central1","object":"api/function-source.zip","generation":"1738701811114410"}},"dockerRegistry":"ARTIFACT_REGISTRY","serviceAccount":"projects/insilico-surveys/serviceAccounts/205912587561-compute@developer.gserviceaccount.com","automaticUpdatePolicy":{}},"serviceConfig":{"service":"projects/insilico-surveys/locations/us-central1/services/api","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"insilico-surveys\",\"storageBucket\":\"insilico-surveys.firebasestorage.app\"}","GCLOUD_PROJECT":"insilico-surveys","EVENTARC_CLOUD_EVENT_SOURCE":"projects/insilico-surveys/locations/us-central1/services/api","FUNCTION_TARGET":"api","LOG_EXECUTION_ID":"true"},"ingressSettings":"ALLOW_ALL","serviceAccountEmail":"205912587561-compute@developer.gserviceaccount.com","availableMemory":"256Mi","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"FAILED","labels":{"firebase-functions-hash":"f963926e62b176376b328f76bd750cef7aa529ad"},"stateMessages":[{"severity":"ERROR","type":"CloudRunServiceNotFound","message":"Cloud Run service projects/insilico-surveys/locations/us-central1/services/api for the function was not found. The function will not work correctly. Please redeploy."}],"environment":"GEN_2","url":"https://us-central1-insilico-surveys.cloudfunctions.net/api","satisfiesPzi":true},"stages":[{"name":"SERVICE","state":"NOT_STARTED"}],"operationType":"UPDATE_FUNCTION"},"done":true,"error":{"code":3,"message":"Build failed with status: FAILURE and message: npm error code EUSAGE\nnpm error\nnpm error `npm ci` can only install packages when your package.json and package-lock.json or npm-shrinkwrap.json are in sync. Please update your lock file with `npm install` before continuing.\nnpm error\nnpm error Invalid: lock file's firebase-admin@12.7.0 does not satisfy firebase-admin@11.11.1\nnpm error Invalid: lock file's firebase-functions@6.3.1 does not satisfy firebase-functions@4.9.0\nnpm error Missing: stripe@13.11.0 from lock file\nnpm error Invalid: lock file's @fastify/busboy@3.1.1 does not satisfy @fastify/busboy@1.2.1\nnpm error Invalid: lock file's @firebase/database-compat@1.0.8 does not satisfy @firebase/database-compat@0.3.4\nnpm error Invalid: lock file's @firebase/database-types@1.0.5 does not satisfy @firebase/database-types@0.10.4\nnpm error Invalid: lock file's @google-cloud/firestore@7.11.0 does not satisfy @google-cloud/firestore@6.8.0\nnpm error Invalid: lock file's @google-cloud/storage@7.15.0 does not satisfy @google-cloud/storage@6.12.0\nnpm error Invalid: lock file's uuid@10.0.0 does not satisfy uuid@9.0.1\nnpm error Missing: text-decoding@1.0.0 from lock file\nnpm error Invalid: lock file's @firebase/component@0.6.9 does not satisfy @firebase/component@0.6.4\nnpm error Invalid: lock file's @firebase/database@1.0.8 does not satisfy @firebase/database@0.14.4\nnpm error Invalid: lock file's @firebase/logger@0.4.2 does not satisfy @firebase/logger@0.4.0\nnpm error Invalid: lock file's @firebase/util@1.10.0 does not satisfy @firebase/util@1.9.3\nnpm error Invalid: lock file's @firebase/auth-interop-types@0.2.3 does not satisfy @firebase/auth-interop-types@0.2.1\nnpm error Invalid: lock file's @firebase/app-types@0.9.2 does not satisfy @firebase/app-types@0.9.0\nnpm error Invalid: lock file's google-gax@4.4.1 does not satisfy google-gax@3.6.1\nnpm error Invalid: lock file's @google-cloud/paginator@5.0.2 does not satisfy @google-cloud/paginator@3.0.7\nnpm error Invalid: lock file's @google-cloud/projectify@4.0.0 does not satisfy @google-cloud/projectify@3.0.0\nnpm error Invalid: lock file's @google-cloud/promisify@4.0.0 does not satisfy @google-cloud/promisify@3.0.1\nnpm error Missing: compressible@2.0.18 from lock file\nnpm error Missing: ent@2.2.2 from lock file\nnpm error Invalid: lock file's gaxios@6.7.1 does not satisfy gaxios@5.1.3\nnpm error Invalid: lock file's google-auth-library@9.15.1 does not satisfy google-auth-library@8.9.0\nnpm error Invalid: lock file's retry-request@7.0.2 does not satisfy retry-request@5.0.2\nnpm error Invalid: lock file's teeny-request@9.0.0 does not satisfy teeny-request@8.0.3\nnpm error Missing: punycode@1.4.1 from lock file\nnpm error Missing: safe-regex-test@1.1.0 from lock file\nnpm error Missing: @types/express@4.17.3 from lock file\nnpm error Invalid: lock file's https-proxy-agent@7.0.6 does not satisfy https-proxy-agent@5.0.1\nnpm error Missing: fast-text-encoding@1.0.6 from lock file\nnpm error Invalid: lock file's gcp-metadata@6.1.1 does not satisfy gcp-metadata@5.3.0\nnpm error Invalid: lock file's gtoken@7.1.0 does not satisfy gtoken@6.1.2\nnpm error Missing: lru-cache@6.0.0 from lock file\nnpm error Invalid: lock file's @grpc/grpc-js@1.12.5 does not satisfy @grpc/grpc-js@1.8.22\nnpm error Missing: @types/rimraf@3.0.2 from lock file\nnpm error Missing: is-stream-ended@0.1.4 from lock file\nnpm error Invalid: lock file's proto3-json-serializer@2.0.2 does not satisfy proto3-json-serializer@1.1.1\nnpm error Missing: protobufjs@7.2.4 from lock file\nnpm error Missing: protobufjs-cli@1.1.1 from lock file\nnpm error Missing: @types/glob@8.1.0 from lock file\nnpm error Missing: @types/minimatch@5.1.2 from lock file\nnpm error Missing: google-p12-pem@4.0.1 from lock file\nnpm error Invalid: lock file's agent-base@7.1.3 does not satisfy agent-base@6.0.2\nnpm error Missing: debug@4.4.0 from lock file\nnpm error Missing: escodegen@1.14.3 from lock file\nnpm error Missing: espree@9.6.1 from lock file\nnpm error Missing: estraverse@5.3.0 from lock file\nnpm error Missing: glob@8.1.0 from lock file\nnpm error Missing: jsdoc@4.0.4 from lock file\nnpm error Missing: minimist@1.2.8 from lock file\nnpm error Missing: semver@7.7.1 from lock file\nnpm error Missing: tmp@0.2.3 from lock file\nnpm error Missing: uglify-js@3.19.3 from lock file\nnpm error Missing: estraverse@4.3.0 from lock file\nnpm error Missing: esutils@2.0.3 from lock file\nnpm error Missing: optionator@0.8.3 from lock file\nnpm error Missing: acorn@8.14.0 from lock file\nnpm error Missing: acorn-jsx@5.3.2 from lock file\nnpm error Missing: eslint-visitor-keys@3.4.3 from lock file\nnpm error Missing: @jsdoc/salty@0.2.9 from lock file\nnpm error Missing: @types/markdown-it@14.1.2 from lock file\nnpm error Missing: bluebird@3.7.2 from lock file\nnpm error Missing: catharsis@0.9.0 from lock file\nnpm error Missing: js2xmlparser@4.0.2 from lock file\nnpm error Missing: klaw@3.0.0 from lock file\nnpm error Missing: markdown-it@14.1.0 from lock file\nnpm error Missing: markdown-it-anchor@8.6.7 from lock file\nnpm error Missing: marked@4.3.0 from lock file\nnpm error Missing: mkdirp@1.0.4 from lock file\nnpm error Missing: requizzle@0.2.4 from lock file\nnpm error Missing: underscore@1.13.7 from lock file\nnpm error Missing: @types/linkify-it@5.0.0 from lock file\nnpm error Missing: @types/mdurl@2.0.0 from lock file\nnpm error Missing: xmlcreate@2.0.4 from lock file\nnpm error Missing: argparse@2.0.1 from lock file\nnpm error Missing: entities@4.5.0 from lock file\nnpm error Missing: linkify-it@5.0.0 from lock file\nnpm error Missing: mdurl@2.0.0 from lock file\nnpm error Missing: punycode.js@2.3.1 from lock file\nnpm error Missing: uc.micro@2.1.0 from lock file\nnpm error Missing: deep-is@0.1.4 from lock file\nnpm error Missing: fast-levenshtein@2.0.6 from lock file\nnpm error Missing: levn@0.3.0 from lock file\nnpm error Missing: prelude-ls@1.1.2 from lock file\nnpm error Missing: type-check@0.3.2 from lock file\nnpm error Missing: word-wrap@1.2.5 from lock file\nnpm error Missing: debug@4.4.0 from lock file\nnpm error Missing: is-regex@1.2.1 from lock file\nnpm error Missing: has-tostringtag@1.0.2 from lock file\nnpm error Missing: ms@2.1.3 from lock file\nnpm error Missing: yallist@4.0.0 from lock file\nnpm error Missing: minimatch@5.1.6 from lock file\nnpm error Missing: brace-expansion@2.0.1 from lock file\nnpm error Missing: ms@2.1.3 from lock file\nnpm error\nnpm error Clean install a project\nnpm error\nnpm error Usage:\nnpm error npm ci\nnpm error\nnpm error Options:\nnpm error [--install-strategy <hoisted|nested|shallow|linked>] [--legacy-bundling]\nnpm error [--global-style] [--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]]\nnpm error [--include <prod|dev|optional|peer> [--include <prod|dev|optional|peer> ...]]\nnpm error [--strict-peer-deps] [--foreground-scripts] [--ignore-scripts] [--no-audit]\nnpm error [--no-bin-links] [--no-fund] [--dry-run]\nnpm error [-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]\nnpm error [-ws|--workspaces] [--include-workspace-root] [--install-links]\nnpm error\nnpm error aliases: clean-install, ic, install-clean, isntall-clean\nnpm error\nnpm error Run \"npm help ci\" for more info\nnpm error A complete log of this run can be found in: /www-data-home/.npm/_logs/2025-02-18T00_09_13_523Z-debug-0.log. For more details see the logs at https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561."}}
[debug] [2025-02-18T00:09:42.472Z] Got source token undefined for region us-central1
[error] Build failed with status: FAILURE and message: npm error code EUSAGE
npm error
npm error `npm ci` can only install packages when your package.json and package-lock.json or npm-shrinkwrap.json are in sync. Please update your lock file with `npm install` before continuing.
npm error
npm error Invalid: lock file's firebase-admin@12.7.0 does not satisfy firebase-admin@11.11.1
npm error Invalid: lock file's firebase-functions@6.3.1 does not satisfy firebase-functions@4.9.0
npm error Missing: stripe@13.11.0 from lock file
npm error Invalid: lock file's @fastify/busboy@3.1.1 does not satisfy @fastify/busboy@1.2.1
npm error Invalid: lock file's @firebase/database-compat@1.0.8 does not satisfy @firebase/database-compat@0.3.4
npm error Invalid: lock file's @firebase/database-types@1.0.5 does not satisfy @firebase/database-types@0.10.4
npm error Invalid: lock file's @google-cloud/firestore@7.11.0 does not satisfy @google-cloud/firestore@6.8.0
npm error Invalid: lock file's @google-cloud/storage@7.15.0 does not satisfy @google-cloud/storage@6.12.0
npm error Invalid: lock file's uuid@10.0.0 does not satisfy uuid@9.0.1
npm error Missing: text-decoding@1.0.0 from lock file
npm error Invalid: lock file's @firebase/component@0.6.9 does not satisfy @firebase/component@0.6.4
npm error Invalid: lock file's @firebase/database@1.0.8 does not satisfy @firebase/database@0.14.4
npm error Invalid: lock file's @firebase/logger@0.4.2 does not satisfy @firebase/logger@0.4.0
npm error Invalid: lock file's @firebase/util@1.10.0 does not satisfy @firebase/util@1.9.3
npm error Invalid: lock file's @firebase/auth-interop-types@0.2.3 does not satisfy @firebase/auth-interop-types@0.2.1
npm error Invalid: lock file's @firebase/app-types@0.9.2 does not satisfy @firebase/app-types@0.9.0
npm error Invalid: lock file's google-gax@4.4.1 does not satisfy google-gax@3.6.1
npm error Invalid: lock file's @google-cloud/paginator@5.0.2 does not satisfy @google-cloud/paginator@3.0.7
npm error Invalid: lock file's @google-cloud/projectify@4.0.0 does not satisfy @google-cloud/projectify@3.0.0
npm error Invalid: lock file's @google-cloud/promisify@4.0.0 does not satisfy @google-cloud/promisify@3.0.1
npm error Missing: compressible@2.0.18 from lock file
npm error Missing: ent@2.2.2 from lock file
npm error Invalid: lock file's gaxios@6.7.1 does not satisfy gaxios@5.1.3
npm error Invalid: lock file's google-auth-library@9.15.1 does not satisfy google-auth-library@8.9.0
npm error Invalid: lock file's retry-request@7.0.2 does not satisfy retry-request@5.0.2
npm error Invalid: lock file's teeny-request@9.0.0 does not satisfy teeny-request@8.0.3
npm error Missing: punycode@1.4.1 from lock file
npm error Missing: safe-regex-test@1.1.0 from lock file
npm error Missing: @types/express@4.17.3 from lock file
npm error Invalid: lock file's https-proxy-agent@7.0.6 does not satisfy https-proxy-agent@5.0.1
npm error Missing: fast-text-encoding@1.0.6 from lock file
npm error Invalid: lock file's gcp-metadata@6.1.1 does not satisfy gcp-metadata@5.3.0
npm error Invalid: lock file's gtoken@7.1.0 does not satisfy gtoken@6.1.2
npm error Missing: lru-cache@6.0.0 from lock file
npm error Invalid: lock file's @grpc/grpc-js@1.12.5 does not satisfy @grpc/grpc-js@1.8.22
npm error Missing: @types/rimraf@3.0.2 from lock file
npm error Missing: is-stream-ended@0.1.4 from lock file
npm error Invalid: lock file's proto3-json-serializer@2.0.2 does not satisfy proto3-json-serializer@1.1.1
npm error Missing: protobufjs@7.2.4 from lock file
npm error Missing: protobufjs-cli@1.1.1 from lock file
npm error Missing: @types/glob@8.1.0 from lock file
npm error Missing: @types/minimatch@5.1.2 from lock file
npm error Missing: google-p12-pem@4.0.1 from lock file
npm error Invalid: lock file's agent-base@7.1.3 does not satisfy agent-base@6.0.2
npm error Missing: debug@4.4.0 from lock file
npm error Missing: escodegen@1.14.3 from lock file
npm error Missing: espree@9.6.1 from lock file
npm error Missing: estraverse@5.3.0 from lock file
npm error Missing: glob@8.1.0 from lock file
npm error Missing: jsdoc@4.0.4 from lock file
npm error Missing: minimist@1.2.8 from lock file
npm error Missing: semver@7.7.1 from lock file
npm error Missing: tmp@0.2.3 from lock file
npm error Missing: uglify-js@3.19.3 from lock file
npm error Missing: estraverse@4.3.0 from lock file
npm error Missing: esutils@2.0.3 from lock file
npm error Missing: optionator@0.8.3 from lock file
npm error Missing: acorn@8.14.0 from lock file
npm error Missing: acorn-jsx@5.3.2 from lock file
npm error Missing: eslint-visitor-keys@3.4.3 from lock file
npm error Missing: @jsdoc/salty@0.2.9 from lock file
npm error Missing: @types/markdown-it@14.1.2 from lock file
npm error Missing: bluebird@3.7.2 from lock file
npm error Missing: catharsis@0.9.0 from lock file
npm error Missing: js2xmlparser@4.0.2 from lock file
npm error Missing: klaw@3.0.0 from lock file
npm error Missing: markdown-it@14.1.0 from lock file
npm error Missing: markdown-it-anchor@8.6.7 from lock file
npm error Missing: marked@4.3.0 from lock file
npm error Missing: mkdirp@1.0.4 from lock file
npm error Missing: requizzle@0.2.4 from lock file
npm error Missing: underscore@1.13.7 from lock file
npm error Missing: @types/linkify-it@5.0.0 from lock file
npm error Missing: @types/mdurl@2.0.0 from lock file
npm error Missing: xmlcreate@2.0.4 from lock file
npm error Missing: argparse@2.0.1 from lock file
npm error Missing: entities@4.5.0 from lock file
npm error Missing: linkify-it@5.0.0 from lock file
npm error Missing: mdurl@2.0.0 from lock file
npm error Missing: punycode.js@2.3.1 from lock file
npm error Missing: uc.micro@2.1.0 from lock file
npm error Missing: deep-is@0.1.4 from lock file
npm error Missing: fast-levenshtein@2.0.6 from lock file
npm error Missing: levn@0.3.0 from lock file
npm error Missing: prelude-ls@1.1.2 from lock file
npm error Missing: type-check@0.3.2 from lock file
npm error Missing: word-wrap@1.2.5 from lock file
npm error Missing: debug@4.4.0 from lock file
npm error Missing: is-regex@1.2.1 from lock file
npm error Missing: has-tostringtag@1.0.2 from lock file
npm error Missing: ms@2.1.3 from lock file
npm error Missing: yallist@4.0.0 from lock file
npm error Missing: minimatch@5.1.6 from lock file
npm error Missing: brace-expansion@2.0.1 from lock file
npm error Missing: ms@2.1.3 from lock file
npm error
npm error Clean install a project
npm error
npm error Usage:
npm error npm ci
npm error
npm error Options:
npm error [--install-strategy <hoisted|nested|shallow|linked>] [--legacy-bundling]
npm error [--global-style] [--omit <dev|optional|peer> [--omit <dev|optional|peer> ...]]
npm error [--include <prod|dev|optional|peer> [--include <prod|dev|optional|peer> ...]]
npm error [--strict-peer-deps] [--foreground-scripts] [--ignore-scripts] [--no-audit]
npm error [--no-bin-links] [--no-fund] [--dry-run]
npm error [-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
npm error [-ws|--workspaces] [--include-workspace-root] [--install-links]
npm error
npm error aliases: clean-install, ic, install-clean, isntall-clean
npm error
npm error Run "npm help ci" for more info
npm error A complete log of this run can be found in: /www-data-home/.npm/_logs/2025-02-18T00_09_13_523Z-debug-0.log. For more details see the logs at https://console.cloud.google.com/cloud-build/builds;region=us-central1/f708ecdc-af23-467a-9a63-2b0f88625429?project=205912587561.
[debug] [2025-02-18T00:09:42.476Z] Total Function Deployment time: 48262
[debug] [2025-02-18T00:09:42.476Z] 1 Functions Deployed
[debug] [2025-02-18T00:09:42.476Z] 1 Functions Errored
[debug] [2025-02-18T00:09:42.476Z] 0 Function Deployments Aborted
[debug] [2025-02-18T00:09:42.476Z] Average Function Deployment time: 48261
[info] 
[info] Functions deploy had errors with the following functions:
	api(us-central1)
[debug] [2025-02-18T00:09:42.476Z] Not printing URL for HTTPS function. Typically this means it didn't match a filter or we failed deployment
[info] i  functions: cleaning up build files... 
[debug] [2025-02-18T00:09:42.477Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.477Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.478Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.478Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.478Z] >>> [apiv2][query] DELETE https://artifactregistry.googleapis.com/v1beta2/projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts/packages/api [none]
[debug] [2025-02-18T00:09:42.478Z] >>> [apiv2][query] GET https://us.gcr.io/v2/insilico-surveys/gcf/us-central1/tags/list [none]
[debug] [2025-02-18T00:09:42.709Z] <<< [apiv2][status] GET https://us.gcr.io/v2/insilico-surveys/gcf/us-central1/tags/list 404
[debug] [2025-02-18T00:09:42.709Z] <<< [apiv2][body] GET https://us.gcr.io/v2/insilico-surveys/gcf/us-central1/tags/list {"errors":[{"code":"NAME_UNKNOWN","message":"Repository \"us.gcr.io\" not found"}]}
[debug] [2025-02-18T00:09:42.710Z] Failed docker command with error  Request to https://us.gcr.io/v2/insilico-surveys/gcf/us-central1/tags/list had HTTP Error: 404, Not Found {"name":"FirebaseError","children":[],"context":{"body":{"errors":[{"code":"NAME_UNKNOWN","message":"Repository \"us.gcr.io\" not found"}],"error":{"message":"Not Found"}},"response":{"statusCode":404}},"exit":1,"message":"Request to https://us.gcr.io/v2/insilico-surveys/gcf/us-central1/tags/list had HTTP Error: 404, Not Found","status":404}
[debug] [2025-02-18T00:09:42.711Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.711Z] Checked if tokens are valid: true, expires at: 1739840921526
[debug] [2025-02-18T00:09:42.711Z] >>> [apiv2][query] GET https://us.gcr.io/v2/insilico-surveys/gcf/us-central1/tags/list [none]
[debug] [2025-02-18T00:09:42.718Z] <<< [apiv2][status] DELETE https://artifactregistry.googleapis.com/v1beta2/projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts/packages/api 404
[debug] [2025-02-18T00:09:42.719Z] <<< [apiv2][body] DELETE https://artifactregistry.googleapis.com/v1beta2/projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts/packages/api {"error":{"code":404,"message":"Package \"projects/insilico-surveys/locations/us-central1/repositories/gcf-artifacts/packages/api\" was not found.","status":"NOT_FOUND"}}
